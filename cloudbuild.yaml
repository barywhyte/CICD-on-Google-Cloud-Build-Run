steps:
# This step runs the unit tests on the app
- name: 'python:3.7-slim'
  id: Test
  entrypoint: /bin/sh
  args:
  - -c
  - 'pip install flask && python test.py -v'
  
- name: gcr.io/cloud-builders/git
  args: ["fetch", "--unshallow"]
- name: gcr.io/cloud-builders/git
  entrypoint: /bin/bash
  args: ["-c", "init"]
- name: gcr.io/cloud-builders/git
  entrypoint: /bin/bash
  args: ["-c", "echo ${_MAJOR}.${_MINOR}.$(git rev-list --count master) > IMAGE_TAG"]
- name: gcr.io/cloud-builders/docker
  entrypoint: /bin/bash
  args: ["-c", "docker build -f Dockerfile -t gcr.io/$PROJECT_ID/python-app:$(cat IMAGE_TAG) -t gcr.io/$PROJECT_ID/python-app:latest --cache-from gcr.io/$PROJECT_ID/python-app:latest ." ]


# This step builds the container image.
#- name: 'gcr.io/cloud-builders/docker'
#  entrypoint: /bin/bash
#  id: Build
#  args:
#  - 'build'
#  - '-t'
#  - 'gcr.io/$PROJECT_ID/python-app:$SHORT_SHA'
#  - '.'

# This step pushes the image to Container Registry
# The PROJECT_ID and SHORT_SHA variables are automatically
# replaced by Cloud Build.

- name: gcr.io/cloud-builders/docker
  entrypoint: /bin/bash
  args: ["-c", "docker push gcr.io/$PROJECT_ID/python-app:$(cat IMAGE_TAG)"]
- name: gcr.io/cloud-builders/docker
  args: ["push", "gcr.io/$PROJECT_ID/python-app:latest"]
tags: ["my-tag"]




#- name: 'gcr.io/cloud-builders/docker'
#  id: Push
#  args:
#  - 'push'
#  - 'gcr.io/$PROJECT_ID/python-app:$SHORT_SHA'
images:
- gcr.io/$PROJECT_ID/python-app

  

